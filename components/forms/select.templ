package forms

import (
    "sort"
    tabler "github.com/farhadhf/go-tabler/components"
	"slices"
)

type OptionElementOpts struct {
    Value string
    Title string
    Selected bool
    Attributes templ.Attributes
}
type SelectElementOpts struct {
    Name string
    Options []OptionElementOpts
    Value string

    Multiple bool
    Classes string
    Rounded bool
    Flush bool
    Size tabler.SizeOption
    Attributes templ.Attributes
}

type SelectOpts struct {
    WrapperAttributes templ.Attributes
    WrapperClasses string

    LabelOptions LabelElementOpts
    SelectOptions SelectElementOpts
    Hint templ.Component
}

func setOptionElementSelected(opts OptionElementOpts, value string) OptionElementOpts {
    if opts.Value == value {
        opts.Selected = true
    }
    return opts
}

// StringMapToOptionElementOpts takes a map[string]string and returns an optionally sorted slice of OptionElementOpts.
func StringMapToOptionElementOpts(m map[string]string, sortItems bool, selected string) []OptionElementOpts {
    var opts []OptionElementOpts
    for k, v := range m {
        opt := OptionElementOpts{
            Title: v,
            Value: k,
        }
        if k == selected {
            opt.Selected = true
        }
        opts = append(opts, opt)
    }

    if sortItems {
        sort.SliceStable(opts, func(i, j int) bool {
            return opts[i].Title < opts[j].Title
        })
    }

    return opts
}

// StringSliceToOptionElementOpts takes a []string slice and returns an optionally sorted slice of
// OptionElementOpts with both titles and values of the option elements set to the value of the string slice elements.
func StringSliceToOptionElementOpts(s []string, sortItems bool, selected string) []OptionElementOpts {
    var opts []OptionElementOpts
    if sortItems {
        slices.Sort(s)
    }
    for _, v := range s {
        opt := OptionElementOpts{
            Title: v,
            Value: v,
        }
        if v == selected {
            opt.Selected = true
        }
        opts = append(opts, opt)
    }

    return opts
}

templ OptionElement(opts OptionElementOpts) {
    <option
        value={opts.Value}
        if opts.Selected {
            selected
        }
        {opts.Attributes...}
    >
        { opts.Title }
    </option>
}

templ SelectElement(opts SelectElementOpts) {
    <select
        multiple?={opts.Multiple}
        if opts.Name != "" {
            name={opts.Name}
        }
        class={
            "form-select",
            templ.KV("form-control-rounded", opts.Rounded),
            templ.KV("form-control-flush", opts.Rounded),
            templ.KV("form-select-"+string(opts.Size), opts.Size != ""),
            opts.Classes,
        }
        { opts.Attributes... }
    >
        for _, optionOpts := range opts.Options {
            @OptionElement(setOptionElementSelected(optionOpts, opts.Value))
        }
    </select>
}

templ Select(opts SelectOpts) {
    <div class={opts.WrapperClasses} { opts.WrapperAttributes... }>
        if opts.LabelOptions.Label != nil {
            @LabelElement(opts.LabelOptions)
        }
        @SelectElement(opts.SelectOptions)
        if opts.Hint != nil {
            <p class="form-hint">
                @opts.Hint
            </p>
        }
    </div>
}
