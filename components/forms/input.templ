package forms

import (
    tabler "github.com/farhadhf/go-tabler/components"
)

type InputElementOpts struct {
    InputType string
    Name string
    Placeholder string
    Value string
    Rounded bool
    Flush bool
    Size tabler.SizeOption
    Attributes templ.Attributes
    Classes string
}

type LabelElementOpts struct {
    Label templ.Component
    Description templ.Component
    For string
    Attributes templ.Attributes
    Classes string
}

type InputOpts struct {    
    WrapperAttributes templ.Attributes
    WrapperClasses string

    InputOptions InputElementOpts
    LabelOptions LabelElementOpts
    Hint templ.Component
}

type InputIconAddonOpts struct {
    StartAddonIcon string
    EndAddonIcon string
    Hint templ.Component
}

type InputGroupOpts struct {
    Start templ.Component
    End templ.Component
    Flat bool
    Hint templ.Component
}

type TextAreaElementOpts struct {
    Name string
    Placeholder string
    Classes string
    Attributes templ.Attributes
}

type TextAreaOpts struct {
    WrapperAttributes templ.Attributes
    WrapperClasses string

    TextAreaOptions TextAreaElementOpts
    LabelOptions LabelElementOpts
    Hint templ.Component
}

templ InputElement(opts InputElementOpts) {
    <input
        if opts.InputType != "" {
            type={ opts.InputType }
        } else {
            type="text"
        }
        if opts.Name != "" {
            name={ opts.Name }
        }
        if opts.Placeholder != "" {
            placeholder={ opts.Placeholder }
        }
        if opts.Value != "" {
            value={ opts.Value }
        }
        class={
            "form-control",
            templ.KV("form-control-rounded", opts.Rounded),
            templ.KV("form-control-flush", opts.Rounded),
            templ.KV("form-control-"+string(opts.Size), opts.Size != ""),
            opts.Classes,
        }

        { opts.Attributes... }
    />
}

templ LabelElement(opts LabelElementOpts) {
    <label
        class={"form-label", opts.Classes}
        if opts.For != "" {
            for={ opts.For }
        }
        { opts.Attributes... }
    >
        @opts.Label
        if opts.Description != nil {
            <span class="form-label-description">
                @opts.Description
            </span>
        }
    </label>
}

templ Input(opts InputOpts) {
    <div class={opts.WrapperClasses} { opts.WrapperAttributes... }>
        if opts.LabelOptions.Label != nil {
            @LabelElement(opts.LabelOptions)
        }
        @InputElement(opts.InputOptions)
        if opts.Hint != nil {
            <p class="form-hint">
                @opts.Hint
            </p>
        }
    </div>
}

templ InputWithIcon(inputOpts InputOpts, addonOpts InputIconAddonOpts) {
    <div class={inputOpts.WrapperClasses} { inputOpts.WrapperAttributes... }>
        if inputOpts.LabelOptions.Label != nil {
            @LabelElement(inputOpts.LabelOptions)
        }
        <div class="input-icon mb-3">
            if addonOpts.StartAddonIcon != "" {
                <span class="input-icon-addon">
                    @tabler.Icon(addonOpts.StartAddonIcon)
                </span>
            }
            
            @InputElement(inputOpts.InputOptions)

            if addonOpts.EndAddonIcon != "" {
                <span class="input-icon-addon">
                    @tabler.Icon(addonOpts.EndAddonIcon)
                </span>
            }
        </div>
        if addonOpts.Hint != nil {
            <p class="form-hint">
                @addonOpts.Hint
            </p>
        }
    </div>
}

templ InputWithLoader(opts InputOpts, placeAtTheEnd bool) {
    <div class={opts.WrapperClasses} { opts.WrapperAttributes... }>
        if opts.LabelOptions.Label != nil {
            @LabelElement(opts.LabelOptions)
        }
        <div class="input-icon mb-3">
            if !placeAtTheEnd {
                <span class="input-icon-addon">
                    <div class="spinner-border spinner-border-sm text-secondary" role="status"></div>
                </span>
            }
            
            @InputElement(opts.InputOptions)

            if placeAtTheEnd {
                <span class="input-icon-addon">
                    <div class="spinner-border spinner-border-sm text-secondary" role="status"></div>
                </span>
            }
        </div>
    </div>
}

templ InputGroup(opts InputOpts, groupOpts InputGroupOpts) {
    <div class={opts.WrapperClasses} { opts.WrapperAttributes... }>
        if opts.LabelOptions.Label != nil {
            @LabelElement(opts.LabelOptions)
        }
        <div class={
            "input-group",
            templ.KV("input-group-flat", groupOpts.Flat),
        }>
            if groupOpts.Start != nil {
                <span class="input-group-text">
                    @groupOpts.Start
                </span>
            }
            
            @InputElement(opts.InputOptions)

            if groupOpts.End != nil {
                <span class="input-group-text">
                    @groupOpts.End
                </span>
            }
        </div>
        if groupOpts.Hint != nil {
            <p class="form-hint">
                @groupOpts.Hint
            </p>
        }
    </div>
}

templ TextAreaElement(opts TextAreaElementOpts) {
    <textarea 
        class={"form-control", opts.Classes} 
        if opts.Name != "" {
            name={opts.Name}
        }
        if opts.Placeholder != "" {
            placeholder={opts.Placeholder}
        }
        {opts.Attributes...}
    ></textarea>
}

templ TextArea(opts TextAreaOpts) {
    <div class={opts.WrapperClasses} { opts.WrapperAttributes... }>
        if opts.LabelOptions.Label != nil {
            @LabelElement(opts.LabelOptions)
        }
        @TextAreaElement(opts.TextAreaOptions)
        if opts.Hint != nil {
            <p class="form-hint">
                @opts.Hint
            </p>
        }
    </div>
}

// templ SeparatedInput(opts InputOpts)